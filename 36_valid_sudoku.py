from collections import defaultdict
import pytest

LENGTH = 9


def createLookup(board):
    lookup = defaultdict(list[tuple[int, int]])
    for i in range(LENGTH):
        for j in range(LENGTH):
            if board[i][j] != ".":
                lookup[int(board[i][j])].append((i, j))
    return lookup


def isValidSudoku(board: list[list[str]]) -> bool:
    lookup = createLookup(board)

    for i in range(10):
        rowLookup = set()
        colLookup = set()
        subboardLookup = set()

        for row, col in lookup[i]:
            if i not in lookup:
                continue

            subboard = (row // 3) * 3 + col // 3
            if row in rowLookup or col in colLookup or subboard in subboardLookup:
                return False

            rowLookup.add(row)
            colLookup.add(col)
            subboardLookup.add(subboard)

    return True


@pytest.mark.parametrize(
    "board, expected",
    [
        (
            [
                ["5", "3", ".", ".", "7", ".", ".", ".", "."],
                ["6", ".", ".", "1", "9", "5", ".", ".", "."],
                [".", "9", "8", ".", ".", ".", ".", "6", "."],
                ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
                ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
                [".", "6", ".", ".", ".", ".", "2", "8", "."],
                [".", ".", ".", "4", "1", "9", ".", ".", "5"],
                [".", ".", ".", ".", "8", ".", ".", "7", "9"],
            ],
            True,
        ),
        (
            [
                ["8", "3", ".", ".", "7", ".", ".", ".", "."],
                ["6", ".", ".", "1", "9", "5", ".", ".", "."],
                [".", "9", "8", ".", ".", ".", ".", "6", "."],
                ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
                ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
                [".", "6", ".", ".", ".", ".", "2", "8", "."],
                [".", ".", ".", "4", "1", "9", ".", ".", "5"],
                [".", ".", ".", ".", "8", ".", ".", "7", "9"],
            ],
            False,
        ),
        (
            [
                [".", "9", ".", ".", "4", ".", ".", ".", "."],
                ["1", ".", ".", ".", ".", ".", "6", ".", "."],
                [".", ".", "3", ".", ".", ".", ".", ".", "."],
                [".", ".", ".", ".", ".", ".", ".", ".", "."],
                [".", ".", ".", "7", ".", ".", ".", ".", "."],
                ["3", ".", ".", ".", "5", ".", ".", ".", "."],
                [".", ".", "7", ".", ".", "4", ".", ".", "."],
                [".", ".", ".", ".", ".", ".", ".", ".", "."],
                [".", ".", ".", ".", "7", ".", ".", ".", "."],
            ],
            True,
        ),
        (
            [
                [".", ".", ".", ".", ".", "3", ".", ".", "."],
                ["8", ".", ".", ".", ".", "5", ".", "1", "."],
                [".", ".", ".", ".", "7", ".", ".", ".", "3"],
                [".", ".", ".", ".", ".", ".", ".", ".", "."],
                [".", "5", "9", "7", ".", ".", ".", "9", "."],
                ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                [".", "6", ".", ".", ".", ".", "2", ".", "."],
                [".", ".", ".", ".", ".", ".", ".", ".", "."],
                [".", ".", ".", ".", ".", ".", "7", ".", "."],
            ],
            False,
        ),
    ],
)
def test_isValidSudoku(board, expected):
    assert isValidSudoku(board) is expected
